---
title: "Collect & Transform Data"
execute:
  warning: false
  echo: true  # Ensure this is set to true if you want to see the code
  eval: true  # Ensure this is set to true to allow execution
format:
  gfm:
    preview-mode: raw
  html:
    code-fold: true
    code-summary: "Show the code"
    embed-resources: true
    toc: true
    html-math-method: plain
    theme: cosmo
  pdf:
    geometry: landscape
    echo: false
    toc: true
    number-sections: true
    documentclass: article
    header-includes:
      - \usepackage{graphicx} # for graphics support
jupyter: python3
---

# Import Modules

```{python}
from pathlib import Path
import json
import polars as pl
```
# Initialise Parameters

```{python}
#| tags: [parameters]
data_dir = Path("data")
trips_url = "https://s3.amazonaws.com/tripdata/202403-citibike-tripdata.csv.zip"
trips_filename = "202403-citibike-tripdata.csv.zip"
geojson_url = "https://raw.githubusercontent.com/HodgesWardElliott/custom-nyc-neighborhoods/refs/heads/master/custom-pedia-cities-nyc-Mar2018.geojson"
geojson_filename = "nyc-neighbourhoods.geojson"
geojson_path = data_dir / geojson_filename
csv_trips_filename = trips_filename.replace('.csv.zip', '.csv')
csv_path = data_dir / csv_trips_filename
zip_path = data_dir / trips_filename
```

# Trips

## Download Trips Data

```{python}
# Download and unzip trips data if CSV does not exist
if not csv_path.exists():
    # Download the zip file if not already present
    if not zip_path.exists():
        !curl -L -o {zip_path} {trips_url}
    # Unzip the file
    !unzip -d {data_dir} {zip_path}
    # Remove the zip file
    zip_path.unlink(missing_ok=True)
```

## View Trips Data

```{python}
# Get the CSV filename (remove .zip extension)
csv_trips_filename = trips_filename.replace('.csv.zip', '.csv')
!wc -l {data_dir}/{csv_trips_filename}
!head -n 6 {data_dir}/{csv_trips_filename}
```

## Load Trips Data as Polars DataFrame

```{python}
trips = pl.read_csv(
    f"{data_dir}/{csv_trips_filename}", 
    try_parse_dates=True,
    schema_overrides={
        "start_station_id": pl.String,
        "end_station_id": pl.String
    },
).sort(
    "started_at"
)
```

## Inspect Trips Data

```{python}
print(type(trips))
print(trips.describe())
```

```{python}
print(trips[:, :4])
print(trips[:, 4:8])
print(trips[:, 8:])
```

## Save Trips DataFrame as Parquet File

```{python}
# Save with same base filename but .parquet extension
parquet_trips_filename = trips_filename.replace('.zip', '.parquet')
trips.write_parquet(f'{data_dir}/{parquet_trips_filename}')
```

# Neighbourhoods

## Download GeoJSON File
```{python}
# Download geojson if not already present
if not geojson_path.exists():
    !curl -L -o {geojson_path} {geojson_url}

#!python -m json.tool {data_dir}/{geojson_filename}
```

## Display Sample of GeoJSON

```{python}
with open(f"{data_dir}/{geojson_filename}") as f:
    geojson = json.load(f)

# Pretty-print the first feature
if "features" in geojson and len(geojson["features"]) > 0:
    print(json.dumps(geojson["features"][0], indent=2))
```

## Convert GeoJSON to Polars DataFrame
```{python}
neighbourhoods = (
    pl.read_json(f"{data_dir}/{geojson_filename}")
    .select("features")
    .explode("features")
    .unnest("features")
    .unnest("properties")
    .select("neighborhood", "borough", "geometry")
    .unnest("geometry")
    .with_columns(polygon=pl.col("coordinates").list.first())
    .select("neighborhood", "borough", "polygon")
    .filter(pl.col("borough") != "Staten Island")
    .sort("neighborhood")
)
```
## Inspect Neighbourhoods DataFrame
```{python}
neighbourhoods.describe()
```

## Save Neighbourhoods as Parquet File

```{python}
# Create the Parquet filename by replacing .geojson with .parquet
neighbourhoods_parquet_filename = f"{data_dir}/{geojson_filename.replace('.geojson', '.parquet')}"

# Save the DataFrame as a Parquet file
neighbourhoods.write_parquet(neighbourhoods_parquet_filename)
```

# Display File Sizes

CSV (547M) vs Parquet (93M)

GeoJSON (1.5M) vs Parquet (357K)

```{python}
!ls -lh {data_dir}/*.csv {data_dir}/*.geojson {data_dir}/*.parquet
```